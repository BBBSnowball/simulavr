\input texinfo @c -*-texinfo-*-
@c %**start of header
@setfilename simulavrxx.info
@settitle Simulavrxx Documentation 0.8.006
@c %**end of header

@include version.texi

@copying
This file documents the simulavrxx program.

Copyright @copyright{} 2001, 2002, 2003 Theodore A. Roth

Copyright @copyright{} 2004 Theodore A. Roth, Klaus Rudolph

Copyright @copyright{} 2005 Klaus Rudolph
@sp 2
Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation approved
by the Free Software Foundation.
@end copying

@titlepage
@title Simulavrxx - an AVR simulation framework
@subtitle A simulator for the Atmel AVR family of microcontrollers.
@subtitle For simulavrxx version @value{VERSION}, @value{UPDATED}.
@author by Theodore A. Roth, Klaus Rudolph, William Rivet

@c The following two commands start the copyright page.
@page
@hfill Send bugs and comments on Simulavrxx to@*
@hfill @w{@email{simulavr-devel@@nongnu.org}}
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c Output the table of contentes at the beginning.
@contents

@ifnottex
@node Top, Introduction, (dir), (dir)
@top Simulavr

@insertcopying
@end ifnottex

@menu
* Introduction::                What is simulavrxx?
* Invoking::                    
* Index::                       Complete index.

@end menu

@node Introduction, Invoking, Top, Top
@chapter Introduction

@cindex chapter, Introduction_x

The simulavrxx program is a simulator for the Atmel AVR family of
microcontrollers.  Simulavrxx can be used either standalone or as a
remote target for gdb.  When used in gdbserver mode, the simulator is
used as a backend so that gdb can be used as a source level debugger for
AVR programs.

Simulavrxx is derived from Theodore Roth´s simulavr. The hardware
simulation part is comletly written new in C++, only the instruction
decoder and the gdb interface are mostly copied from the original
simulavr sources.

Why I have written it again: I need some more hardware models like
timers, spi, uart and others which where not available at the point I
have started. And my biggest problem was the missing IO Port
functionality.  For my personal needs I must have the ability to connect
the avr io ports to other devices like other avr devices or lcd, leds
and other components. After looking into the original code I was really
unable to understand it and add the functionality I need. So I started
nearly from scratch but used the instruction decoder and the gdb server
interface which helps me a lot.

What features are new:
@itemize @bullet
@item run multiple avr devices in one simulation
@item connect multiple avr core pins to other devices like lcd, led and others
@item connect multiple avr cores to multiple gdb instances (each on own socket/port no)
@item write simulation scripts in tcl/tk, other languages could be added by simply adding swig scripts!
@item tracing the execution of the program
@item these traces supports all debugging information directly from the elf-file
@item the traces run step by step for each device so you see all actions in the multiple devices in time correct order
@item every interrupt call is visible
@item interrupt statistics with latency, longest and shortest execution time and some more
@item multiple cores can run where each has a differnt clock frequency
@item you have a simple text based ui interface to add lcd, switches, leds or other components and can modify it
  during simulation, so there is no longer a need to enter a pin value
during execution.
@item execution timing should be nearly acurate :-), different access times for ram/extram/eeprom and other
  hardware components are simulated.
@item a pseudo core hardware component is introduced to do "printf" debugging. This "device" is connected to
  a normal named unix socket so you have not to waste a uart or other hardware in your test environment.
@item elf file loading is supported, no objcopy needed anymore
@item execution speed is tuned a lot, most hardware simulations are now only done if needed
@item external io pins which are not ports are also available
@item simulavrxx.so provides a "loadable" tcl/tk library to write simulation sessions without compiling simulator sources
@end itemize


@node Invoking, Index, Introduction, Top
@chapter Invoking

@cindex chapter, Invoking_x

Options for simulavrxx:
@table @samp
@item -u  
run with user interface for external pin handling at port 7777
@item -f --file <name>
load elf-file <name> for simulation in simulated target
@item -d --device <device name>
simulate <device name> 
The following devices are supported:
at90s8515
at90s4433
atmega128
@item -g --gdbserver
running as gdb-server
@item -G
running as gdb-server and write debug info for gdb-connection
@item -p  <port>
change <port> for gdb server to port
@item -t --trace <file name>
enable trace outputs into <file name>
@end table


@node Index,  , Invoking, Top
@unnumbered Index

@printindex cp

@bye
